@using RecipeProcessing.Models.Images
@using RecipeProcessing.Services
@inject ImageService imageService
@inject IJSRuntime JSRuntime

@page "/analyze"

<PageTitle>Image analyzer</PageTitle>

<img id="imagePreview"/>

<InputFile OnChange="@LoadFile" />

@if (results != null)
{    
    <table class="table">
        <thead>
            <tr>
                <th>Category</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cat in results.Categories)
            {
                <tr>
                    <td>@cat.Name</td>
                    <td>@cat.Score</td>
                </tr>
            }
        </tbody>
    </table>

    <table class="table">
        <thead>
            <tr>
                <th>Tag</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tag in results.Tags)
            {
                <tr>
                    <td>@tag.Name</td>
                    <td>@tag.Score</td>
                </tr>
            }
        </tbody>
    </table>

    <table class="table">
        <thead>
            <tr>
                <th>Object</th>
                <th>Coordinates</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var obj in results.Objects)
            {
                <tr>
                    <td>@obj.Property</td>
                    <td>@obj.X, @obj.Y</td>
                </tr>
            }
        </tbody>
    </table>

    <table class="table">
        <thead>
            <tr>
                <th>Text</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cap in results.Captions)
            {
                <tr>
                    <td>@cap.Text</td>
                    <td>@cap.Score</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ImageAnalysisResult? results;


    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        var resizedImage = 
            await imageFile.RequestImageFileAsync("image/jpg", 500, 500);
        var jsImageStream = resizedImage.OpenReadStream();
        var dotnetImageStream = new DotNetStreamReference(jsImageStream);
        await JSRuntime.InvokeVoidAsync("setImageUsingStreaming", 
            "imagePreview", dotnetImageStream);

        results = await imageService.AnalyzeImage(e.File.OpenReadStream());
    }
}
